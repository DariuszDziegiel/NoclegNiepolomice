<?php

namespace AdminBundle\Repository;
use AdminBundle\Entity\CmsArticleCategory;

/**
 * CmsArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CmsArticleRepository extends \Doctrine\ORM\EntityRepository
{

    public function save($object, $persist = true) {
        if ($persist) {
            $this->getEntityManager()->persist($object);
        }
        $this->getEntityManager()->flush();
    }
    
    /**
     * @param null $limit
     * @param bool $returnQuery
     * @return array|\Doctrine\ORM\Query
     */
    public function getActive($limit = null, $returnQuery = false) {
        $qb = $this->createQueryBuilder('art')
            ->where('art.isActive = 1')
            ->orderBy('art.id', 'DESC');

        if (is_int($limit)) {
            $qb->setMaxResults($limit);
        }

        if ($returnQuery) {
            return $qb->getQuery();
        }
        return $qb->getQuery()->getResult();
    }



    /**
     * GEt Article by SLug
     * @param $slug
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findBySlug($slug) {
        $qb = $this->createQueryBuilder('art')
            ->join('art.translations', 'trans')
            ->where('trans.slug = :slug')
            ->setParameter(':slug', $slug);
        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @param CmsArticleCategory $cmsArticleCategoryEntity
     * @return array
     */
    public function findByArticleCategory(CmsArticleCategory $cmsArticleCategoryEntity, $limit = null, $isActive = true) {
        $qb = $this->createQueryBuilder('art')
            ->join('art.categories', 'cat')
            ->where('cat.id = :art_cat_id')
            ->setParameter(':art_cat_id', $cmsArticleCategoryEntity->getId())
        ;

        if ($isActive) {
            $qb->andWhere('art.isActive = true');
        }

        switch ($cmsArticleCategoryEntity->getTitleCode()) {
            case 'news':
                $qb->orderBy('art.createdAt', 'DESC');
                break;
            case 'events':
                $qb->orderBy('art.date', 'DESC');
                break;
            case 'articles':
                $qb->orderBy('art.createdAt', 'DESC');
                break;
            default:
            $qb->orderBy('art.createdAt', 'DESC');
        }
        if (is_int($limit)) {
            $qb->setMaxResults($limit);
        }
        return $qb->getQuery();
    }
    
    
    


}
