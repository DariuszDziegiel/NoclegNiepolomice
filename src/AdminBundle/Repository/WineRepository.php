<?php

namespace AdminBundle\Repository;
use AppBundle\Utils\Wine\WineFilterCriteria;

/**
 * WineRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WineRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param bool $isOnlyActive
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    public function getAll($locale = 'pl', $isOnlyActive = false) {
        $em = $this->getEntityManager();
        $sql = "
        SELECT 
                w.*,
                witr.description as wine_description,
                wctr.title as wine_color,
                wico.sort as wine_color_sort,
                wicotr.title as wine_country,
                wicou.sort as wine_country_sort,
                wicou.country_code as wine_country_code,
                wicoretr.title as wine_country_region,
                wicosu.title as wine_country_subregion,
                wctr.locale as wine_color_locale,
                wicotr.locale as wine_country_locale,
                wicoretr.locale as wine_country_region_locale
            FROM wine w
            
                JOIN wine_translation witr ON w.id = witr.translatable_id
            
                #wine color
                JOIN wine_color wico ON w.wine_color_id = wico.id 
                JOIN wine_color_translation wctr ON wico.id = wctr.translatable_id
                
                #wine country
                LEFT JOIN wine_country wicou ON w.wine_country_id = wicou.id
                LEFT JOIN wine_country_translation wicotr ON wicou.id = wicotr.translatable_id
                
                #wine country region
                LEFT JOIN wine_country_region wicore ON w.wine_country_region_id = wicore.id
                LEFT JOIN wine_country_region_translation wicoretr ON wicore.id = wicoretr.translatable_id
            
                #wine country subregion
                LEFT JOIN wine_country_subregion wicosu ON w.wine_country_subregion_id = wicosu.id
                
            WHERE wctr.locale = '" .$locale. "'
            AND (wicotr.locale = '" .$locale. "' OR wicotr.locale IS NULL) 
            AND (wicoretr.locale = '" .$locale. "' OR wicoretr.locale IS NULL)
            
            ORDER BY 
            wine_color_sort, 
            wine_country_sort, 
            wine_country_region,
            wine_country_subregion,
            w.id
            ";
        $stmt = $em->getConnection()->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll(\PDO::FETCH_ASSOC);
    }
    
    /**
     * @param WineFilterCriteria $wineFilterCriteria
     */
    public function getAllByFilterCriteria(WineFilterCriteria $wineFilterCriteria, $locale = 'pl') {
        $em = $this->getEntityManager();
        $sql = "
        SELECT 
                w.*,
                witr.description as wine_description,
                wctr.title as wine_color,
                wico.sort as wine_color_sort,
                wicotr.title as wine_country,
                wicou.sort as wine_country_sort,
                wicou.country_code as wine_country_code,
                wicoretr.title as wine_country_region,
                wicosu.title as wine_country_subregion,
                wctr.locale as wine_color_locale,
                wicotr.locale as wine_country_locale,
                wicoretr.locale as wine_country_region_locale
            FROM wine w
            
                JOIN wine_translation witr ON w.id = witr.translatable_id
            
                #wine color
                JOIN wine_color wico ON w.wine_color_id = wico.id 
                JOIN wine_color_translation wctr ON wico.id = wctr.translatable_id
                
                #wine country
                LEFT JOIN wine_country wicou ON w.wine_country_id = wicou.id
                LEFT JOIN wine_country_translation wicotr ON wicou.id = wicotr.translatable_id
                
                #wine country region
                LEFT JOIN wine_country_region wicore ON w.wine_country_region_id = wicore.id
                LEFT JOIN wine_country_region_translation wicoretr ON wicore.id = wicoretr.translatable_id
            
                #wine country subregion
                LEFT JOIN wine_country_subregion wicosu ON w.wine_country_subregion_id = wicosu.id
                
            WHERE wctr.locale = '" .$locale. "'
            AND (wicotr.locale = '" .$locale. "' OR wicotr.locale IS NULL) 
            AND (wicoretr.locale = '" .$locale. "' OR wicoretr.locale IS NULL)";

        //year filter
        $sql .= " AND w.year >= :yearMin AND w.year <= :yearMax ";

        //price filter
        $sql .= " AND w.price75cl >= :priceMin AND w.price75cl <= :priceMax ";

        //wine Color filter
        if ($wineColors = $wineFilterCriteria->getWineColor()) {
            $sql .= " AND w.wine_color_id IN (" .implode(',', $wineColors). ") ";
        }

        //wine maturity filter
        if ($wineMaturities = $wineFilterCriteria->getWineMaturity()) {
            $sql .= " AND w.wine_maturity_id IN (" .implode(',', $wineMaturities). ") ";
        }

        //Wine Country filter
        $wineCountries  = $wineFilterCriteria->getWineCountry();
        if ($wineCountries) {
            $sql .= " AND w.wine_country_id IN (" .implode(',', $wineCountries). ") ";
        }

        $sql .= " ORDER BY 
            wine_color_sort, 
            wine_country_sort, 
            wine_country_region,
            wine_country_subregion,
            w.id";

        $stmt = $em->getConnection()->prepare($sql);

        $stmt->bindValue(':yearMin', $wineFilterCriteria->getYearRangeMin());
        $stmt->bindValue(':yearMax', $wineFilterCriteria->getYearRangeMax());
        $stmt->bindValue(':priceMin', $wineFilterCriteria->getPriceRangeMin());
        $stmt->bindValue(':priceMax', $wineFilterCriteria->getPriceRangeMax());

        $stmt->execute();

        return $stmt->fetchAll(\PDO::FETCH_ASSOC);
    }
    
    public function getByFilterCriteria(WineFilterCriteria $wineFilterCriteria) {
        $qb = $this->createQueryBuilder('w');

        //Price
        $qb
            ->where('w.price >= :priceMin')
            ->andWhere('w.price <= :priceMax')
            ->setParameter(':priceMin', $wineFilterCriteria->getPriceRangeMin())
            ->setParameter(':priceMax', $wineFilterCriteria->getPriceRangeMax());

        //Year
        $qb
            ->andWhere('w.year >= :yearMin')
            ->andWhere('w.year <= :yearMax')
            ->setParameter(':yearMin', $wineFilterCriteria->getYearRangeMin())
            ->setParameter(':yearMax', $wineFilterCriteria->getYearRangeMax());

        //wine color
        if ($wineColors = $wineFilterCriteria->getWineColor()) {
            $qb
                ->andWhere('w.wineColor IN (:wineColors)')
                ->setParameter(':wineColors', $wineColors);
        }

        //wine maturity
        if ($wineMaturities = $wineFilterCriteria->getWineMaturity()) {
            $qb
                ->andWhere('w.wineMaturity IN (:wineMaturities)')
                ->setParameter(':wineMaturities', $wineMaturities);
        }

        //wine country
        if ($wineCountries  = $wineFilterCriteria->getWineCountry()) {
            $qb
                ->andWhere('w.wineCountry IN (:wineCountries)')
                ->setParameter(':wineCountries', $wineCountries);
        }
        return $qb->getQuery()->getResult();
    }

    public function getMinYear() {
        $qb = $this->createQueryBuilder('w')
            ->select('MIN(w.year) AS min_year');
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getMaxYear() {
        $qb = $this->createQueryBuilder('w')
            ->select('MAX(w.year) AS max_year');
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getMinPrice() {
        $qb = $this->createQueryBuilder('w')
            ->select('MIN(w.price75cl) AS min_price');
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getMaxPrice() {
        $qb = $this->createQueryBuilder('w')
            ->select('MAX(w.price75cl) AS max_price');
        return $qb->getQuery()->getSingleScalarResult();
    }




    
}
